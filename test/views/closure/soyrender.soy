{namespace soyrender}

/**
 * Tests rendering SoyBoolean
 */
{template .valueBoolean}
{@param value: bool}

Value is: {if $value}TRUE{else}FALSE{/if}
{/template}

/**
 * Tests rendering SoyList
 */
{template .valueList}
{@param list: list<any>}

List is: {for $item in $list}
  {if not isFirst($item)},{sp}{/if}
  {call .valueListItem}
  	{param item: $item /}
  {/call}
{ifempty}
  EMPTY
{/for}
{/template}

/**
 * List item for testing SoyList
 */
{template .valueListItem}
{@param item: any}

{if $item}{$item}{else}UNDEFINED{/if}
{/template}

/**
 * Tests rendering SoyNull
 */
{template .valueNull}
{@param value: any}

Value is: {if $value}NOT NULL{else}NULL{/if}
{/template}

/**
 * Tests rendering SoyNumber
 */
{template .valueNumber}
{@param value: number}

Value is: {$value}
{/template}

/**
 * Tests rendering SoyString
 */
{template .valueString}
{@param? value: string}

Value is: {if $value}{$value}{else}UNDEFINED{/if}
{/template}

/**
 * Tests rendering SoyHtml
 */
{template .valueHtml}
{@param value: html}

Value is: {$value}
{/template}

/**
 * Tests rendering SoyString in URI contexts
 */
{template .valueUriString}
{@param value: string}

<a href="http://foo.com?bar={$value}&baz=b"></a>
{/template}

/**
 * Tests rendering SoyUri
 */
{template .valueUri}
{@param value: uri}

<a href="http://foo.com{$value}"></a>
{/template}
